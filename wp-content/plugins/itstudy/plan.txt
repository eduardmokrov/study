1.	Создаем главную папку плагина itstudy в директории wp-content/plugins
2.	В папке itstudy создаем itstudy.php и uninstall.php. Itsduy.php является главный файл плагина в нем напишем какие JS и CSS скрипты должны прекриптся.
3.	Поддиректории для itstudy будут
•	Assets – в нем будут папки CSS, JS и Images
•	Admin – для хранения файлов админ части плагина
•	Lib – для хранения файлов php которые будут отвечать за создание шорткада, регистрации нового типа поста, добаление произволный полей для курса/урока, например поле для выбора тип курса
•	Templates- для хранение файлов которые будут отвечать за показа урока, а в далнейшем курса профильа ментора или ученика
•	Locale – где будут хранятся файлы локализации
4.	JS будет пока что scripts.js и в нем напишем jQuery код для разных еффектов скажем для клика иконки хинта, добавление разных классов и.т
5.	CSS папке будут CSS файлы для стилей, пока что в нем будут
•	Bootstrap.css
•	Fontawesome.css
•	Style.css – для стилей фронта
•	Admin_atyles.css – для стилей админ части
6.	Главный файл плагина itstudy.php будет отвечать за то какие файли для чего предкрепляются(php js или css). Так же что делать при инилизации то есть создать роля ученика и ментора с помоши функции add_role(), дать им полномочия. Еще в этом файле обявляутся константбые переменные такие как главная директория, директория локали и т.д.  с самого начала файла как и других файлах проверается:
if ( ! defined( 'ABSPATH' ) ) {exit;}
Делается это для того чтоб проверить путь к файлу идет с директории где установленна вордпресс или нет. То есть некий способ зашиты от внешных воздействии

7.	Uninstall.php файл отвечает за деинсталацию плагина и какие действия выполнить
8.	С помоши вордпресс функции
 register_activation_hook( __FILE__, array( get_called_class(), 'activation' ) );
Говорим вордпрессу что делать при активации плагина где activation это имя функции где и определяются действие а именно добавить роли ползователей.
9.	Другие фунции itstudy.php такие как обявление констатнов, локали, определение админ части и других php файлов в помещаются в функции init() и определаются в помощи вордпресс функции add_action(‘действие’, ‘имя функции’),
10.	В конце вызевается следушая строка
Itstudy::init();
где Itstudy класс плагина а init() имя функции которая вызывается при иницилазации плагина.
11.	Далее в папке lib создаем functions.php. этото файл будет отвечать за правильное прикриплениев JS и CSS файлов, то есть есть скирт для админки и есть для фронте и на фронте не должен отопрожатся тото файл сцриптов которе нужно для админки
12.	Также пищем функцию в functions.php для файлов в папке templates. Это нужно для того чтоб если страница урока то работал именнто то файл php который отвечает за показов урока, таже логика для курсов, для них будут создатся разные файлы в директории templates
13.	В functions.php обявляется шорткад для  формы  ответа вопросов и определается файл который будет генереировать и показать форму когда вы исползуете шорткад для вставки какого то вопроса
14.	Шорткад обявляется с помоши фукции add_shortcode(‘shortcode’, ‘function_name’).
То есть функционал пишется в function_name() функции и после если где то встечается синтаксис [shortcode params=”par”][/shortcode] то начинает работать в function_name(), где params тоже определается в функции шорткада
15.	Параметры шортцада нужны чтоб дать ему уникалность и потом была возможность взять на интересушие данные, то есть этимы параметрамы мы можем разнообразить повидение шорткада.
/***********************************************************************************/
16.	В папке Admin создаем  admin.php файл. Этот файл будет отвечать за для пояляние пункта курсы в меню админки вордпресса. Делается это с помоши функции add_menu_page()
Где в качесте параметров задаются имя, уникалный путь для url таже функцию в котором определается как должен выглидеть страница етого пункта
17.	Также в admin.php пишем функцию произвольной сортировки с помоши drag and drop
18.	Drag and drop возможность будет даватся от admin_scripts.js файла где будут хранится все js скрипты которые будут нужны в админ части плагина
19.	Далее в папке assets/css создаем файл admin_styles.css в которым будуть все стили для админ части
20.	В папке lib создаем файлы post-types.php и custom-fields.php, которые и будут отвечать за сзоздание курсов и уроков ка специалные типы постов
21.	Post-types.php будем регистрировать типы постом то есть курс и урок. Делается это в помоши вордпресс функции register_post_type(‘post-type-name’)
22.	в post-types.php создаем соотвуюие класы для курсов и уроков:
Itstudy_post_type_course для курсов
Itstudy_post_type_lesson для уроков
23.	в этих классах определаются все параметры каждого типа для постов(курсы/уроки). эти параметры определаются в масиве и  там задаются какие действие мождно делатсь с этим типом и какие стандарные поля должен имет для создание или редактирование
24.	после того ка все параметры заданны последны шагов будет иммено регистрирование нового типе с помоши фукции register_post_type(‘type-name’, args). Где args это масив парамаетров упомянутые выше.
25.	После того как все действые выполнены в каждом классе как для курсов так и для уроков
В конце файла post-types.php создаются обекты этих классов и наши типы уже есть. а в админке они показываются с помошу файла admin.php как говорилось выше.

26.	Файл custom-fields.php должен отвечать за создание уникальных полей для курсов и уроков, для курсов это будут поле для выбора типа курса, и поле выбора студента а для уроков будет поле выбора курса.
27.	Уникалные поля добавляются следушим образом
add_meta_box( ‘field_ID', Label', ‘call_function’, 'post-type', 'placement', 'priority' );
где call_function имя фунцкции которое создает вид для поля (текс или селект , и т.д)
28.	Полсе пишется функция для сохронение значениев в уникалных полях  фукция сохранение вызываетя с помощи функции add_action(‘save_post’, ‘function_name_for save’)
29.	После всех этих действия все данные должны сохранятся в базе в правильном виде. В вордпресс все записи постов сохрянаются в таблице wp_posts не важно это пост, курс урок  или статичная страница. В таблице есть поле post_type где и сохранаятся информация о посте(это урок, курс или страница)
30.	Для 12 и 13 пунктов списка
в function.php пишем фукции тtemplate_redirect_lesson(), template_redirect_course(). В них будет проверятся если на фронте должен показыватся урок или курс на фронте то загрузить соответствующий файл ис папки templates: lesson.php или course.php.
31.	В functions.php пишем фукцию question_shortcode(). В нем будем определять файл генерируюий шоркад для вопросов: shortcode.php, и с помоши фукции add_shortcode() говорим вордпресс что будет шорткад для вопросов.
/***********************************************************************************/
32.	Тепер в странице создание курса есть две специалные поля: поле селект для выбора типа курса и поле ученики где где выводятся имена учеников
33.	Для того чтоб предкрипить крыс к какому нибудь ученику нужно вставить галочку. После сохранение или обновление курса в базе данный в таблице wp_postmeta сохранается специальная дата с ID курса, именем метадаты course_students и его значение которое из себя представлает ID учеников которые были помечанны
34.	Метадата сохранается с помошю функции update_post_meta(post_id, meta_key, Meta_val).
35.	Также при сохранение курса обнавлается метадата учеников которые были помечены. Делается это с помоши функции update_user_meta(user_id, meta_key, meta_val). В в таблице метадат ползователей wp_usermeta, сохранается дата ид ученика, 'course_assigned', id курса.
36.	При снятие галочек и обновление курса ученик уже ни имеет курс
37.	Также если какой то ученик уже имеет курс его имя не показвается в списке имен путем проверки в таблице wp_usermeta есть ли для него значение ‘course_assigned’
38.	При создание уроков есть спецалное поле parent course которы из себя представляет селект где по списку выводится все курс@. При выборе курса данный урок предкрепляется к этому курсу с помоши функции update_post_meta()
39.	Эта функция должна соьранить в таблице wp_postmeta id урока и выбранного курса в качестве родителского ид, чтоб потом выводились правильные уроки для конкретного курса.
40.	Далее после проверки что все работает как надо переходим к созданию шоркада вопросов.
41.	В папаке templates создаем shortcode.php, где и должна пишется вес функционал шорткада вопросов.
42.	Сначала создаем функцию question_shortcode() который должен отвечать за генерирование формы вопроса на фронте, с вопросом, текстовым полем и кнопкой отправки
43.	При нажатии кнопки отправки вопрос и ответ так же ид ученика должны сохранятся в таблице wp_posts а ответ правильны или нет будет определятся потом и записатся в метдадатах
